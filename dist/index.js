!function(e,r){"object"==typeof exports&&"object"==typeof module?module.exports=r():"function"==typeof define&&define.amd?define([],r):"object"==typeof exports?exports.smartcal=r():e.smartcal=r()}(this,(()=>(()=>{"use strict";var e={819:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.CompiledFormulaExpression=void 0,r.compile=function(e){return new s(e)};const o=t(258),n=t(400),i=t(464);class s{constructor(e){this.expression=e,this._ast=(new n.FormulaParser).execute((new i.FormulaTokenizer).execute(e))}evaluate(e){return(new o.FormulaInterpreter).execute(this._ast,e)}toString(){return this.expression}}r.CompiledFormulaExpression=s},643:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.default=function(e,r){const t=new i.FormulaTokenizer,s=new n.FormulaParser;return(new o.FormulaInterpreter).execute(s.execute(t.execute(e)),r||{})};const o=t(258),n=t(400),i=t(464)},998:function(e,r,t){var o=this&&this.__createBinding||(Object.create?function(e,r,t,o){void 0===o&&(o=t);var n=Object.getOwnPropertyDescriptor(r,t);n&&!("get"in n?!r.__esModule:n.writable||n.configurable)||(n={enumerable:!0,get:function(){return r[t]}}),Object.defineProperty(e,o,n)}:function(e,r,t,o){void 0===o&&(o=t),e[o]=r[t]}),n=this&&this.__exportStar||function(e,r){for(var t in e)"default"===t||Object.prototype.hasOwnProperty.call(r,t)||o(r,e,t)};Object.defineProperty(r,"__esModule",{value:!0}),n(t(643),r),n(t(250),r),n(t(819),r)},250:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.isValidExpression=function(e){try{const r=new n.FormulaTokenizer,t=new o.FormulaParser,i=r.execute(e);return t.isValidFormula(i)}catch(e){return!1}};const o=t(400),n=t(464)},641:(e,r)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.Priority_4_Operator=r.Priority_3_Operator=r.Priority_2_Operator=r.Priority_1_Operator=r.AllOperators=r.Operators=r.ArithmeticOperator=r.ComparisonOperator=r.BackslashOperator=r.QuestionMarkOperator=r.ColonOperator=r.ParenthesisCloseOperator=r.ParenthesisOpenOperator=r.AssignmentOperator=r.NotEqualOperator=r.EqualOperator=r.LessThanOrEqualOperator=r.GreaterThanOrEqualOperator=r.LessThanOperator=r.GreaterThanOperator=r.LogicalOrOperator=r.LogicalAndOperator=r.ModuloOperator=r.ExponentialOperator=r.MultiplicationOperator=r.DivisionOperator=r.SubtractionOperator=r.AdditionOperator=r.ConditionResult=r.REGEX=void 0,r.REGEX={formulaOperatorG:/(<=|\^|%|>=|==|\|\||&&|!=|[+/\-*=()<>?:])/g,formulaOperator:/(<=|>=|\^|%|==|\|\||&&|!=|[+/\-*=()<>?!:])/,formulaFieldName:/f_[\w]/},r.ConditionResult={True:1,False:0},r.AdditionOperator="+",r.SubtractionOperator="-",r.DivisionOperator="/",r.MultiplicationOperator="*",r.ExponentialOperator="^",r.ModuloOperator="%",r.LogicalAndOperator="&&",r.LogicalOrOperator="||",r.GreaterThanOperator=">",r.LessThanOperator="<",r.GreaterThanOrEqualOperator=">=",r.LessThanOrEqualOperator="<=",r.EqualOperator="==",r.NotEqualOperator="!=",r.AssignmentOperator="=",r.ParenthesisOpenOperator="(",r.ParenthesisCloseOperator=")",r.ColonOperator=":",r.QuestionMarkOperator="?",r.BackslashOperator="\\",r.ComparisonOperator=[r.GreaterThanOperator,r.LessThanOperator,r.LogicalOrOperator,r.LogicalAndOperator,r.GreaterThanOrEqualOperator,r.LessThanOrEqualOperator,r.EqualOperator,r.NotEqualOperator],r.ArithmeticOperator=[r.AdditionOperator,r.SubtractionOperator,r.DivisionOperator,r.MultiplicationOperator,r.ExponentialOperator,r.ModuloOperator],r.Operators=[...r.ArithmeticOperator,...r.ComparisonOperator,r.QuestionMarkOperator],r.AllOperators=[...r.Operators,r.ColonOperator,r.ParenthesisCloseOperator,r.ParenthesisOpenOperator],r.Priority_1_Operator=[r.AdditionOperator,r.SubtractionOperator],r.Priority_2_Operator=[r.DivisionOperator,r.MultiplicationOperator,r.ModuloOperator],r.Priority_3_Operator=[r.ExponentialOperator],r.Priority_4_Operator=[...r.ComparisonOperator,r.QuestionMarkOperator]},114:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.BinaryOperation=void 0;const o=t(780);class n extends o.Expression{constructor(e,r,t){super(),this.left=e,this.right=r,this.operator=t}execute(e){return this.operator(this.left.execute(e),this.right.execute(e))}}r.BinaryOperation=n},790:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.ConditionalExpression=void 0;const o=t(780);class n extends o.Expression{constructor(e,r,t){super(),this.condition=e,this.isTrue=r,this.isFalse=t}execute(e){return 0!=this.condition.execute(e)?this.isTrue.execute(e):this.isFalse.execute(e)}}r.ConditionalExpression=n},780:(e,r)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.Expression=void 0;r.Expression=class{}},70:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.ExpressionConstructor=void 0;const o=t(538),n=t(803),i=t(114),s=t(790);r.ExpressionConstructor=class{static literalValue(e){return new o.LiteralValue(e)}static fieldReference(e){return new n.FieldReference(e)}static addition(e,r){return new i.BinaryOperation(e,r,((e,r)=>e+r))}static subtraction(e,r){return new i.BinaryOperation(e,r,((e,r)=>e-r))}static multiplication(e,r){return new i.BinaryOperation(e,r,((e,r)=>e*r))}static division(e,r){return new i.BinaryOperation(e,r,((e,r)=>{if(0===r)throw new Error("Division by zero");return e/r}))}static condition(e,r,t){return new s.ConditionalExpression(e,r,t)}static equality(e,r){return new i.BinaryOperation(e,r,((e,r)=>Number(e===r)))}static superior(e,r){return new i.BinaryOperation(e,r,((e,r)=>Number(e>r)))}static inferior(e,r){return new i.BinaryOperation(e,r,((e,r)=>Number(e<r)))}static different(e,r){return new i.BinaryOperation(e,r,((e,r)=>Number(e!=r)))}static or(e,r){return new i.BinaryOperation(e,r,((e,r)=>Number(e||r)))}static and(e,r){return new i.BinaryOperation(e,r,((e,r)=>Number(e&&r)))}static pow(e,r){return new i.BinaryOperation(e,r,((e,r)=>Math.pow(Number(e),Number(r))))}static modulo(e,r){return new i.BinaryOperation(e,r,((e,r)=>e%r))}}},803:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.FieldReference=void 0;const o=t(780),n=t(641),i=t(400),s=t(464),a=t(258);class u extends o.Expression{constructor(e){super(),this.fieldName=e}execute(e){if(null!=e&&null!=e&&null!=e[this.fieldName])return this.isFormulaRef()?this.executeFormulaRef(e):e[this.fieldName];throw new Error(`The fieldName ${this.fieldName} does not exist or is undefined on object ${e}`)}isFormulaRef(){return n.REGEX.formulaFieldName.test(this.fieldName)}executeFormulaRef(e){const r=new s.FormulaTokenizer,t=new i.FormulaParser,o=new a.FormulaInterpreter,n=t.execute(r.execute(e[this.fieldName]));return o.execute(n,e)}}r.FieldReference=u},538:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.LiteralValue=void 0;const o=t(780);class n extends o.Expression{constructor(e){super(),this._value=e}execute(e){return this._value}}r.LiteralValue=n},73:function(e,r,t){var o=this&&this.__createBinding||(Object.create?function(e,r,t,o){void 0===o&&(o=t);var n=Object.getOwnPropertyDescriptor(r,t);n&&!("get"in n?!r.__esModule:n.writable||n.configurable)||(n={enumerable:!0,get:function(){return r[t]}}),Object.defineProperty(e,o,n)}:function(e,r,t,o){void 0===o&&(o=t),e[o]=r[t]}),n=this&&this.__exportStar||function(e,r){for(var t in e)"default"===t||Object.prototype.hasOwnProperty.call(r,t)||o(r,e,t)};Object.defineProperty(r,"__esModule",{value:!0}),r.ConditionResult=r.FormulaTokenizer=r.AstNode=r.FormulaParser=r.FormulaInterpreter=r.LiteralValue=r.FieldReference=r.ExpressionConstructor=r.Expression=r.ConditionalExpression=r.BinaryOperation=void 0;const i=t(114);Object.defineProperty(r,"BinaryOperation",{enumerable:!0,get:function(){return i.BinaryOperation}});const s=t(790);Object.defineProperty(r,"ConditionalExpression",{enumerable:!0,get:function(){return s.ConditionalExpression}});const a=t(780);Object.defineProperty(r,"Expression",{enumerable:!0,get:function(){return a.Expression}});const u=t(70);Object.defineProperty(r,"ExpressionConstructor",{enumerable:!0,get:function(){return u.ExpressionConstructor}});const p=t(803);Object.defineProperty(r,"FieldReference",{enumerable:!0,get:function(){return p.FieldReference}});const l=t(538);Object.defineProperty(r,"LiteralValue",{enumerable:!0,get:function(){return l.LiteralValue}});const c=t(258);Object.defineProperty(r,"FormulaInterpreter",{enumerable:!0,get:function(){return c.FormulaInterpreter}});const O=t(400);Object.defineProperty(r,"FormulaParser",{enumerable:!0,get:function(){return O.FormulaParser}}),Object.defineProperty(r,"AstNode",{enumerable:!0,get:function(){return O.AstNode}});const d=t(464);Object.defineProperty(r,"FormulaTokenizer",{enumerable:!0,get:function(){return d.FormulaTokenizer}});const h=t(641);Object.defineProperty(r,"ConditionResult",{enumerable:!0,get:function(){return h.ConditionResult}}),n(t(998),r)},258:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.FormulaInterpreter=void 0;const o=t(70),n=t(641);r.FormulaInterpreter=class{execute(e,r){return this.interpret(e,r).execute(r)}interpret(e,r){if(e.isNode()){const t=e.operator,i=this.interpret(e.right,r),s=this.interpret(e.left,r);switch(t){case n.AdditionOperator:return o.ExpressionConstructor.addition(s,i);case n.SubtractionOperator:return o.ExpressionConstructor.subtraction(s,i);case n.MultiplicationOperator:return o.ExpressionConstructor.multiplication(s,i);case n.DivisionOperator:return o.ExpressionConstructor.division(s,i);case n.ModuloOperator:return o.ExpressionConstructor.modulo(s,i);case n.ExponentialOperator:return o.ExpressionConstructor.pow(s,i);default:throw new Error(`This operator ${t} is not supported.`)}}else{if(e.isValue()){const r=e.value;if("number"==typeof r)return o.ExpressionConstructor.literalValue(Number(e.value));{const e=/"([\w]+)"/,t=r.match(e)[1];return o.ExpressionConstructor.literalValue(t)}}if(e.isField()){const t=r[String(e.fieldName)];if(void 0===t)throw new Error(`The variable ${e.fieldName} not defined.`);return o.ExpressionConstructor.fieldReference(e.fieldName)}if(!e.isComparison()){if(e.isConditional()){const t=this.interpret(e.condition,r),n=this.interpret(e.isTrue,r),i=this.interpret(e.isFalse,r);return o.ExpressionConstructor.condition(t,n,i)}throw new Error(`This Expression is not Correct. Please verify Your expression [Interpreter]:${e}`)}{const t=e.operator,i=this.interpret(e.left,r),s=this.interpret(e.right,r);switch(t){case n.GreaterThanOperator:return o.ExpressionConstructor.superior(i,s);case n.LessThanOperator:return o.ExpressionConstructor.inferior(i,s);case n.EqualOperator:return o.ExpressionConstructor.equality(i,s);case n.GreaterThanOrEqualOperator:return o.ExpressionConstructor.or(o.ExpressionConstructor.superior(i,s),o.ExpressionConstructor.equality(i,s));case n.LessThanOrEqualOperator:return o.ExpressionConstructor.or(o.ExpressionConstructor.inferior(i,s),o.ExpressionConstructor.equality(i,s));case n.LogicalOrOperator:return o.ExpressionConstructor.or(i,s);case n.LogicalAndOperator:return o.ExpressionConstructor.and(i,s);case n.NotEqualOperator:return o.ExpressionConstructor.different(i,s);default:throw new Error(`This comparison ${t} method is not supported`)}}}}}},400:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.FormulaParser=r.AstNode=void 0;const o=t(641);o.ArithmeticOperator,o.ComparisonOperator;class n{isConditional(){return!!this.condition&&!!this.isFalse&&!!this.isTrue}isValue(){return null!=this.value}isComparison(){return!!this.isComparisonOperator()}isField(){return!!this.fieldName}isNode(){return!(this.isValue()||this.isField()||this.isComparison()||this.isConditional())}isComparisonOperator(){return!!o.ComparisonOperator.includes(this.operator)}}r.AstNode=n;r.FormulaParser=class{isFormula(e){let r=1,t=1;const n=o.REGEX.formulaOperator;for(let o=0;o<e.length;o++){const i=e[o],s=o-1;if(n.test(String(i)))t=o;else{if(r==s&&t!=s)return!1;r=o}}return!0}checkSyntax(e){this.checkParenthesisSyntax(e),this.checkOperatorSyntax(e),this.checkTernaryConditionSyntax(e)}checkParenthesisSyntax(e){const r=[];if(e.forEach((e=>{if(e===o.ParenthesisOpenOperator&&r.push(o.ParenthesisOpenOperator),e===o.ParenthesisCloseOperator){if(0===r.length)throw new Error("Parenthesis mismatch");r.pop()}})),0!==r.length)throw new Error("Incorrect parenthesis disposition.")}checkOperatorSyntax(e){const r=e.join("");if(/[+-\/*]{2,}/.test(r))throw new Error("Incorrect Operator error");if(1==e.length&&/\w/.test(r))return;if(!/>=|<=|==|!=|&&|\|\||[+-\/*<>%\^][\w\(]/.test(r))throw new Error("Incorrect Operator position for Operand")}checkTernaryConditionSyntax(e){let r=0,t=0;if(e.forEach((e=>{e===o.QuestionMarkOperator&&r++,e===o.ColonOperator&&t++})),r!==t)throw new Error("Incorrect Ternary syntax: unmatched ? and :");const n=/[?:]/;let i=!0;e.forEach((e=>{if(n.test(String(e))){if(i&&e===o.ColonOperator)throw new Error("Ternary syntax error: found ':' before '?'");i=!i}}))}isValidFormula(e){try{return!!this.isFormula(e)&&(this.checkSyntax(e),!0)}catch(e){return!1}}execute(e){if(0!=e.length&&this.isFormula(e))return this.checkSyntax(e),this.parser(e);throw new Error("[Error]: Not formula")}parser(e){const r=this.infixToPostFix(e);return this.generateAST(r)}generateAST(e){return this._generateAST(e,0,[])}_generateAST(e,r,t=[]){const o=e[r];if(null==o)return t[0];if(this.isOperatorFirstAndParenthesis(o)){const e=new n;e.operator=o,this.isArithmeticOperator(o)||this.isComparisonOperator(o)?(e.right=t.pop(),e.left=t.pop()):this.isTernaryOperator(o)&&(e.isFalse=t.pop(),e.isTrue=t.pop(),e.condition=t.pop()),t.push(e)}else{const e=new n;this.isValue(o)?e.value=o:e.fieldName=o,t.push(e)}return this._generateAST(e,r+1,t)}infixToPostFix(e){const r=[],t=[];for(e.forEach((e=>{if(this.isOperatorFirstAndParenthesis(e)){const n=String(e),i=this.priority(n);if(n===o.ParenthesisOpenOperator)t.push(n);else if(n===o.ParenthesisCloseOperator){for(;t.length>0&&t[t.length-1]!==o.ParenthesisOpenOperator;){const e=t.pop();e.trim()!==o.ParenthesisOpenOperator&&r.push(e)}t.pop()}else if(n===o.ColonOperator)for(;t.length>0&&t[t.length-1]!==o.QuestionMarkOperator;)r.push(t.pop());else if(o.Operators.includes(n)){for(;t.length>0&&this.priority(t[t.length-1])>=i;)r.push(t.pop());t.push(n)}}else r.push(e)}));t.length>0;)r.push(t.pop());return r}priority(e){return o.Priority_1_Operator.includes(e)?1:o.Priority_2_Operator.includes(e)?2:o.Priority_3_Operator.includes(e)?3:o.Priority_4_Operator.includes(e)?4:0}isOperatorFirstAndParenthesis(e){return!!o.AllOperators.includes(String(e).trim())}isArithmeticOperator(e){return!!o.ArithmeticOperator.includes(e)}isComparisonOperator(e){return!!o.ComparisonOperator.includes(e)}isTernaryOperator(e){return o.QuestionMarkOperator===e}isValue(e){return!("number"!=typeof e&&!/"[\w]+"/.test(e))}}},464:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.FormulaTokenizer=void 0;const o=t(641);r.FormulaTokenizer=class{formatInput(e){return e.replace(o.REGEX.formulaOperatorG," $1 ").replace(/\s+/g," ").trim()}filterTokens(e){const r=[];let t=!1;return e.forEach((e=>{const n=r[r.length-1];if(/^\d+(\.\d+)?$/.test(e)){const n=r.pop(),i=r.pop();null!=n&&null!=i?o.Priority_1_Operator.includes(n)&&i===o.ParenthesisOpenOperator?(r.push(Number(n+e)),t=!0):r.push(i,n,Number(e)):null==i&&null!=n?r.push(n,Number(e)):r.push(Number(e))}else/-\d+/.test(n)&&e===o.ParenthesisCloseOperator&&t?t=!1:r.push(e)})),r}execute(e){const r=this.formatInput(e);if(""===r.trim())return[];const t=r.split(" ");return this.filterTokens(t)}}}},r={};var t=function t(o){var n=r[o];if(void 0!==n)return n.exports;var i=r[o]={exports:{}};return e[o].call(i.exports,i,i.exports,t),i.exports}(73);return t})()));
//# sourceMappingURL=index.js.map